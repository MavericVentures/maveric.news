#!/usr/bin/env python3
"""
Post Generator v0 - Generate platform-specific posts (X, LinkedIn, TikTok) from ideas
Output: JSON or Markdown with 3 variants per idea
"""

import os
import json
import csv
import random
from datetime import datetime

# Configuration
INPUT_DIR = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'outputs')
INPUT_FILE = os.path.join(INPUT_DIR, 'ideas.csv')
OUTPUT_DIR = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'outputs')
OUTPUT_FILE = os.path.join(OUTPUT_DIR, 'sample_posts.md')

# Ensure output directory exists
os.makedirs(OUTPUT_DIR, exist_ok=True)

# Templates for different platforms
TEMPLATES = {
    'X': [
        "ğŸ”¥ {title} is changing the game! Check out how: {url} #MavericNews #{category} #Trending",
        "Just in: {title} ğŸ‘€ \n\nLearn more: {url} \n\n#MavericNews #{category}",
        "Have you seen this? {title}\n\nClick for insights: {url} #MavericNews #{category}"
    ],
    'LinkedIn': [
        "ğŸ“Š **{title}**\n\nOur team at Maveric News has been analyzing this trend, and the implications for businesses are significant.\n\nRead the full analysis here: {url}\n\n#MavericInsights #{category}",
        "ğŸš€ **New Insights: {title}**\n\nAs professionals in this space, we need to stay ahead of the curve. Here's what you need to know about {title}.\n\nFull article: {url}\n\n#ProfessionalDevelopment #{category}",
        "ğŸ’¡ **Industry Alert: {title}**\n\nStay informed about the latest developments in {category}. This could impact your business strategy in 2025.\n\nRead more: {url}\n\n#BusinessStrategy #{category}"
    ],
    'TikTok': [
        "ğŸ¤¯ {title} is blowing up! #mavericnews #{category} #trending #fyp",
        "Did you know about {title}? This changes everything! #mavericnews #{category} #mindblown",
        "POV: You just discovered {title} and your mind is blown ğŸ”¥ #mavericnews #{category} #gamechanging"
    ]
}

def load_ideas():
    """Load ideas from CSV file"""
    if not os.path.exists(INPUT_FILE):
        print(f"Error: Input file {INPUT_FILE} not found.")
        return []
    
    ideas = []
    with open(INPUT_FILE, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            ideas.append(row)
    
    return ideas

def generate_posts(idea):
    """Generate platform-specific posts for an idea"""
    posts = {}
    
    for platform, templates in TEMPLATES.items():
        # Generate a post using a random template
        template = random.choice(templates)
        post = template.format(
            title=idea['title'],
            url=idea['url'] if idea['url'] else "https://maveric.news",
            category=idea['category']
        )
        posts[platform] = post
    
    return posts

def save_posts_to_markdown(ideas_with_posts):
    """Save generated posts to a Markdown file"""
    with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
        f.write("# Sample Posts Generated by Post Generator v0\n\n")
        f.write(f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        
        for i, idea_posts in enumerate(ideas_with_posts):
            idea = idea_posts['idea']
            posts = idea_posts['posts']
            
            f.write(f"## Idea {i+1}: {idea['title']}\n\n")
            f.write(f"- **Source**: {idea['source']}\n")
            f.write(f"- **Category**: {idea['category']}\n")
            f.write(f"- **URL**: {idea['url']}\n\n")
            
            for platform, post in posts.items():
                f.write(f"### {platform} Post\n\n")
                f.write(f"```\n{post}\n```\n\n")
            
            f.write("---\n\n")
    
    print(f"Sample posts saved to {OUTPUT_FILE}")

def main(num_ideas=2):
    """Main function to generate posts"""
    print("Starting Post Generator v0...")
    
    # Load ideas
    ideas = load_ideas()
    if not ideas:
        print("No ideas found. Please run idea_miner.py first.")
        return
    
    # Select a subset of ideas if we have more than requested
    if len(ideas) > num_ideas:
        selected_ideas = random.sample(ideas, num_ideas)
    else:
        selected_ideas = ideas
    
    # Generate posts for each idea
    ideas_with_posts = []
    for idea in selected_ideas:
        posts = generate_posts(idea)
        ideas_with_posts.append({
            'idea': idea,
            'posts': posts
        })
    
    # Save to Markdown
    save_posts_to_markdown(ideas_with_posts)
    
    print(f"Post Generator completed. Generated posts for {len(ideas_with_posts)} ideas.")
    return ideas_with_posts

if __name__ == "__main__":
    main()